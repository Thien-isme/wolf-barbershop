// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using barbershop.Models.Entitys;

#nullable disable

namespace barbershop.Migrations
{
    [DbContext(typeof(BarbershopContext))]
    [Migration("20250909160141_AddUserIdAndEmployeeRoleIdToEmployee")]
    partial class AddUserIdAndEmployeeRoleIdToEmployee
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Vietnamese_CI_AS")
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("barbershop.Models.Entitys.Appointment", b =>
                {
                    b.Property<long>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("appointment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AppointmentId"));

                    b.Property<DateOnly?>("AppointmentDate")
                        .HasColumnType("date")
                        .HasColumnName("appointment_date");

                    b.Property<TimeOnly?>("AppointmentTime")
                        .HasPrecision(0)
                        .HasColumnType("time(0)")
                        .HasColumnName("appointment_time");

                    b.Property<int>("BarberId")
                        .HasColumnType("int")
                        .HasColumnName("barber_id");

                    b.Property<int>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("branch_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("created_at");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasDefaultValue("BOOKED")
                        .HasColumnName("status");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("AppointmentId");

                    b.HasIndex(new[] { "BarberId" }, "IX_appointments_barber_id");

                    b.HasIndex(new[] { "BranchId" }, "IX_appointments_branch_id");

                    b.HasIndex(new[] { "UserId" }, "IX_appointments_user_id");

                    b.ToTable("appointments", (string)null);
                });

            modelBuilder.Entity("barbershop.Models.Entitys.AppointmentService", b =>
                {
                    b.Property<long>("AppointmentServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("appointment_service_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AppointmentServiceId"));

                    b.Property<long>("AppointmentId")
                        .HasColumnType("bigint")
                        .HasColumnName("appointment_id");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("service_id");

                    b.HasKey("AppointmentServiceId");

                    b.HasIndex(new[] { "AppointmentId" }, "IX_appointment_service_appointment_id");

                    b.HasIndex(new[] { "ServiceId" }, "IX_appointment_service_service_id");

                    b.ToTable("appointment_service", (string)null);
                });

            modelBuilder.Entity("barbershop.Models.Entitys.Branch", b =>
                {
                    b.Property<int>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("branch_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BranchId"));

                    b.Property<string>("BranchName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("branch_name");

                    b.Property<string>("BranchUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("branch_url");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("LocationDetail")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("location_detail");

                    b.Property<string>("ProvinceCity")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("province_city");

                    b.Property<TimeOnly?>("TimeOff")
                        .HasColumnType("time")
                        .HasColumnName("time_off");

                    b.Property<TimeOnly?>("TimeOn")
                        .HasColumnType("time")
                        .HasColumnName("time_on");

                    b.Property<string>("WardCommune")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ward_commune");

                    b.HasKey("BranchId")
                        .HasName("PK_locations");

                    b.ToTable("branchs", (string)null);
                });

            modelBuilder.Entity("barbershop.Models.Entitys.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("employee_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("avatar_url");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("branch_id");

                    b.Property<int?>("EmployeeRoleId")
                        .HasColumnType("int")
                        .HasColumnName("employee_role_id");

                    b.Property<DateOnly>("ExperienceYears")
                        .HasColumnType("date")
                        .HasColumnName("experience_years");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<int?>("QuantityRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("quantity_rate");

                    b.Property<decimal?>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(8, 2)")
                        .HasDefaultValue(0.0m)
                        .HasColumnName("rating");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("EmployeeId");

                    b.HasIndex("EmployeeRoleId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "BranchId" }, "IX_employees_branch_id");

                    b.ToTable("employees", (string)null);
                });

            modelBuilder.Entity("barbershop.Models.Entitys.EmployeeImgHair", b =>
                {
                    b.Property<int>("EmployeeImgHairId")
                        .HasColumnType("int")
                        .HasColumnName("employee_img_hair_id");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("employee_id");

                    b.Property<string>("ImgUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("img_url");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("is_active")
                        .HasDefaultValueSql("('1')");

                    b.HasKey("EmployeeImgHairId")
                        .HasName("employee_img_hair_employee_img_hair_id_primary");

                    b.HasIndex(new[] { "EmployeeId" }, "IX_employee_img_hair_employee_id");

                    b.ToTable("employee_img_hair", (string)null);
                });

            modelBuilder.Entity("barbershop.Models.Entitys.EmployeeRole", b =>
                {
                    b.Property<int>("EmployeeRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("employee_role_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeRoleId"));

                    b.Property<string>("EmployeeRoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("employee_role_name");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.HasKey("EmployeeRoleId")
                        .HasName("PK__employee__AF99BE5B682EDB1F");

                    b.ToTable("employee_role", (string)null);
                });

            modelBuilder.Entity("barbershop.Models.Entitys.EmployeeSkill", b =>
                {
                    b.Property<int>("EmployeeSkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("employee_skill_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeSkillId"));

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("employee_id");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<int>("SkillId")
                        .HasColumnType("int")
                        .HasColumnName("skill_id");

                    b.HasKey("EmployeeSkillId");

                    b.HasIndex(new[] { "EmployeeId" }, "IX_employee_skill_employee_id");

                    b.HasIndex(new[] { "SkillId" }, "IX_employee_skill_skill_id");

                    b.ToTable("employee_skill", (string)null);
                });

            modelBuilder.Entity("barbershop.Models.Entitys.Inventory", b =>
                {
                    b.Property<int>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("inventory_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InventoryId"));

                    b.Property<DateTime?>("LastUpdated")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("last_updated");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("InventoryId");

                    b.HasIndex(new[] { "ProductId" }, "IX_inventory_product_id");

                    b.ToTable("inventory", (string)null);
                });

            modelBuilder.Entity("barbershop.Models.Entitys.Payment", b =>
                {
                    b.Property<long>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("payment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PaymentId"));

                    b.Property<long?>("AppointmentId")
                        .HasColumnType("bigint")
                        .HasColumnName("appointment_id");

                    b.Property<int?>("CasherId")
                        .HasColumnType("int")
                        .HasColumnName("casher_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("created_at");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<DateTime?>("ExpdateDate")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("expdate_date");

                    b.Property<bool?>("IsAppointment")
                        .HasColumnType("bit")
                        .HasColumnName("is_appointment");

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("int")
                        .HasColumnName("payment_method_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasDefaultValue("PENDING")
                        .HasColumnName("status");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(8, 2)")
                        .HasColumnName("subtotal");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(8, 2)")
                        .HasColumnName("total");

                    b.Property<int?>("VoucherId")
                        .HasColumnType("int")
                        .HasColumnName("voucher_id");

                    b.HasKey("PaymentId");

                    b.HasIndex(new[] { "AppointmentId" }, "IX_payments_appointment_id");

                    b.HasIndex(new[] { "CasherId" }, "IX_payments_casher_id");

                    b.HasIndex(new[] { "CustomerId" }, "IX_payments_customer_id");

                    b.HasIndex(new[] { "PaymentMethodId" }, "IX_payments_payment_method_id");

                    b.HasIndex(new[] { "VoucherId" }, "IX_payments_voucher_id");

                    b.ToTable("payments", (string)null);
                });

            modelBuilder.Entity("barbershop.Models.Entitys.PaymentService", b =>
                {
                    b.Property<long>("PaymentServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("payment_service_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PaymentServiceId"));

                    b.Property<int>("BarberId")
                        .HasColumnType("int")
                        .HasColumnName("barber_id");

                    b.Property<long>("PaymentId")
                        .HasColumnType("bigint")
                        .HasColumnName("payment_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(8, 2)")
                        .HasColumnName("price");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("service_id");

                    b.HasKey("PaymentServiceId");

                    b.HasIndex(new[] { "BarberId" }, "IX_payment_service_barber_id");

                    b.HasIndex(new[] { "PaymentId" }, "IX_payment_service_payment_id");

                    b.HasIndex(new[] { "ProductId" }, "IX_payment_service_product_id");

                    b.HasIndex(new[] { "ServiceId" }, "IX_payment_service_service_id");

                    b.ToTable("payment_service", (string)null);
                });

            modelBuilder.Entity("barbershop.Models.Entitys.PaymentsMethod", b =>
                {
                    b.Property<int>("PaymentMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("payment_method_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentMethodId"));

                    b.Property<string>("ImgUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("img_url");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("MethodName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("method_name");

                    b.HasKey("PaymentMethodId");

                    b.ToTable("payments_method", (string)null);
                });

            modelBuilder.Entity("barbershop.Models.Entitys.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int>("Discount")
                        .HasColumnType("int")
                        .HasColumnName("discount");

                    b.Property<string>("Instruction")
                        .HasColumnType("text")
                        .HasColumnName("instruction");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(8, 2)")
                        .HasColumnName("price");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("product_name");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("int")
                        .HasColumnName("product_type_id");

                    b.HasKey("ProductId");

                    b.HasIndex(new[] { "ProductTypeId" }, "IX_products_product_type_id");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("barbershop.Models.Entitys.ProductType", b =>
                {
                    b.Property<int>("ProductTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("product_type_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductTypeId"));

                    b.Property<string>("ProductTypeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("product_type_name");

                    b.HasKey("ProductTypeId");

                    b.ToTable("product_type", (string)null);
                });

            modelBuilder.Entity("barbershop.Models.Entitys.Review", b =>
                {
                    b.Property<long>("ReviewId")
                        .HasColumnType("bigint")
                        .HasColumnName("review_id");

                    b.Property<long>("AppointmentId")
                        .HasColumnType("bigint")
                        .HasColumnName("appointment_id");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("create_at");

                    b.Property<string>("ImgUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("img_url");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("is_active")
                        .HasDefaultValueSql("('1')");

                    b.Property<int>("Rate")
                        .HasColumnType("int")
                        .HasColumnName("rate");

                    b.HasKey("ReviewId")
                        .HasName("reviews_review_id_primary");

                    b.HasIndex(new[] { "AppointmentId" }, "IX_reviews_appointment_id");

                    b.ToTable("reviews", (string)null);
                });

            modelBuilder.Entity("barbershop.Models.Entitys.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("role_name");

                    b.HasKey("RoleId")
                        .HasName("roles_role_id_primary");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("barbershop.Models.Entitys.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("service_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceId"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("DurationMin")
                        .HasColumnType("int")
                        .HasColumnName("duration_min");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(8, 2)")
                        .HasColumnName("price");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("service_name");

                    b.Property<int>("ServiceTypeId")
                        .HasColumnType("int")
                        .HasColumnName("service_type_id");

                    b.HasKey("ServiceId");

                    b.HasIndex(new[] { "ServiceTypeId" }, "IX_services_service_type_id");

                    b.ToTable("services", (string)null);
                });

            modelBuilder.Entity("barbershop.Models.Entitys.ServiceType", b =>
                {
                    b.Property<int>("ServiceTypeId")
                        .HasColumnType("int")
                        .HasColumnName("service_type_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("ServiceTypeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("service_type_name");

                    b.HasKey("ServiceTypeId")
                        .HasName("service_type_service_type_id_primary");

                    b.ToTable("service_type", (string)null);
                });

            modelBuilder.Entity("barbershop.Models.Entitys.Skill", b =>
                {
                    b.Property<int>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("skill_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SkillId"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("SkillName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("skill_name");

                    b.HasKey("SkillId");

                    b.ToTable("skills", (string)null);
                });

            modelBuilder.Entity("barbershop.Models.Entitys.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("address");

                    b.Property<string>("Cccd")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("cccd");

                    b.Property<DateTime?>("CreateAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("create_at");

                    b.Property<DateOnly?>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("dob");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("full_name");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("phone");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("updated_at");

                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("username");

                    b.HasKey("UserId");

                    b.HasIndex(new[] { "RoleId" }, "IX_users_role_id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("barbershop.Models.Entitys.Voucher", b =>
                {
                    b.Property<int>("VoucherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("voucher_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VoucherId"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("DiscountType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("discount_type");

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(8, 2)")
                        .HasColumnName("discount_value");

                    b.Property<DateTime?>("Expdate")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("expdate");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<DateTime?>("Startdate")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("startdate");

                    b.Property<string>("VoucherCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("voucher_code");

                    b.Property<string>("VoucherName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("voucher_name");

                    b.Property<string>("VoucherUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("voucher_url");

                    b.HasKey("VoucherId");

                    b.ToTable("vouchers", (string)null);
                });

            modelBuilder.Entity("barbershop.Models.Entitys.Appointment", b =>
                {
                    b.HasOne("barbershop.Models.Entitys.Employee", "Barber")
                        .WithMany("Appointments")
                        .HasForeignKey("BarberId")
                        .IsRequired()
                        .HasConstraintName("FK_appointments_barber_id");

                    b.HasOne("barbershop.Models.Entitys.Branch", "Branch")
                        .WithMany("Appointments")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK_appointments_location_id");

                    b.HasOne("barbershop.Models.Entitys.User", "User")
                        .WithMany("Appointments")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_appointments_user_id");

                    b.Navigation("Barber");

                    b.Navigation("Branch");

                    b.Navigation("User");
                });

            modelBuilder.Entity("barbershop.Models.Entitys.AppointmentService", b =>
                {
                    b.HasOne("barbershop.Models.Entitys.Appointment", "Appointment")
                        .WithMany("AppointmentServices")
                        .HasForeignKey("AppointmentId")
                        .IsRequired()
                        .HasConstraintName("FK_appointment_service_appointment_id");

                    b.HasOne("barbershop.Models.Entitys.Service", "Service")
                        .WithMany("AppointmentServices")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("FK_appointment_service_service_id");

                    b.Navigation("Appointment");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("barbershop.Models.Entitys.Employee", b =>
                {
                    b.HasOne("barbershop.Models.Entitys.Branch", "Branch")
                        .WithMany("Employees")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK_employees_location_id");

                    b.HasOne("barbershop.Models.Entitys.EmployeeRole", "EmployeeRole")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeeRoleId")
                        .HasConstraintName("FK_Employees_Employees_Role");

                    b.HasOne("barbershop.Models.Entitys.User", "User")
                        .WithMany("Employees")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Users_Employees");

                    b.Navigation("Branch");

                    b.Navigation("EmployeeRole");

                    b.Navigation("User");
                });

            modelBuilder.Entity("barbershop.Models.Entitys.EmployeeImgHair", b =>
                {
                    b.HasOne("barbershop.Models.Entitys.Employee", "Employee")
                        .WithMany("EmployeeImgHairs")
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("employee_img_hair_img_url_foreign");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("barbershop.Models.Entitys.EmployeeSkill", b =>
                {
                    b.HasOne("barbershop.Models.Entitys.Employee", "Employee")
                        .WithMany("EmployeeSkills")
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK_employee_skill_employee_id");

                    b.HasOne("barbershop.Models.Entitys.Skill", "Skill")
                        .WithMany("EmployeeSkills")
                        .HasForeignKey("SkillId")
                        .IsRequired()
                        .HasConstraintName("FK_employee_skill_skill_id");

                    b.Navigation("Employee");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("barbershop.Models.Entitys.Inventory", b =>
                {
                    b.HasOne("barbershop.Models.Entitys.Product", "Product")
                        .WithMany("Inventories")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_inventory_product_id");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("barbershop.Models.Entitys.Payment", b =>
                {
                    b.HasOne("barbershop.Models.Entitys.Appointment", "Appointment")
                        .WithMany("Payments")
                        .HasForeignKey("AppointmentId")
                        .HasConstraintName("FK_payments_appointment_id");

                    b.HasOne("barbershop.Models.Entitys.Employee", "Casher")
                        .WithMany("Payments")
                        .HasForeignKey("CasherId")
                        .HasConstraintName("FK_payments_casher_id");

                    b.HasOne("barbershop.Models.Entitys.User", "Customer")
                        .WithMany("Payments")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_payments_customer_id");

                    b.HasOne("barbershop.Models.Entitys.PaymentsMethod", "PaymentMethod")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentMethodId")
                        .HasConstraintName("FK_payments_payment_method_id");

                    b.HasOne("barbershop.Models.Entitys.Voucher", "Voucher")
                        .WithMany("Payments")
                        .HasForeignKey("VoucherId")
                        .HasConstraintName("FK_payments_voucher_id");

                    b.Navigation("Appointment");

                    b.Navigation("Casher");

                    b.Navigation("Customer");

                    b.Navigation("PaymentMethod");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("barbershop.Models.Entitys.PaymentService", b =>
                {
                    b.HasOne("barbershop.Models.Entitys.Employee", "Barber")
                        .WithMany("PaymentServices")
                        .HasForeignKey("BarberId")
                        .IsRequired()
                        .HasConstraintName("FK_payment_service_barber_id");

                    b.HasOne("barbershop.Models.Entitys.Payment", "Payment")
                        .WithMany("PaymentServices")
                        .HasForeignKey("PaymentId")
                        .IsRequired()
                        .HasConstraintName("FK_payment_service_payment_id");

                    b.HasOne("barbershop.Models.Entitys.Product", "Product")
                        .WithMany("PaymentServices")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_payment_service_product_id");

                    b.HasOne("barbershop.Models.Entitys.Service", "Service")
                        .WithMany("PaymentServices")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("FK_payment_service_service_id");

                    b.Navigation("Barber");

                    b.Navigation("Payment");

                    b.Navigation("Product");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("barbershop.Models.Entitys.Product", b =>
                {
                    b.HasOne("barbershop.Models.Entitys.ProductType", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_products_product_type_id");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("barbershop.Models.Entitys.Review", b =>
                {
                    b.HasOne("barbershop.Models.Entitys.Appointment", "Appointment")
                        .WithMany("Reviews")
                        .HasForeignKey("AppointmentId")
                        .IsRequired()
                        .HasConstraintName("appointment_id_foreign");

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("barbershop.Models.Entitys.Service", b =>
                {
                    b.HasOne("barbershop.Models.Entitys.ServiceType", "ServiceType")
                        .WithMany("Services")
                        .HasForeignKey("ServiceTypeId")
                        .IsRequired()
                        .HasConstraintName("services_service_type_id_foreign");

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("barbershop.Models.Entitys.User", b =>
                {
                    b.HasOne("barbershop.Models.Entitys.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("roles_role_id_foreign");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("barbershop.Models.Entitys.Appointment", b =>
                {
                    b.Navigation("AppointmentServices");

                    b.Navigation("Payments");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("barbershop.Models.Entitys.Branch", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("barbershop.Models.Entitys.Employee", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("EmployeeImgHairs");

                    b.Navigation("EmployeeSkills");

                    b.Navigation("PaymentServices");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("barbershop.Models.Entitys.EmployeeRole", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("barbershop.Models.Entitys.Payment", b =>
                {
                    b.Navigation("PaymentServices");
                });

            modelBuilder.Entity("barbershop.Models.Entitys.PaymentsMethod", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("barbershop.Models.Entitys.Product", b =>
                {
                    b.Navigation("Inventories");

                    b.Navigation("PaymentServices");
                });

            modelBuilder.Entity("barbershop.Models.Entitys.ProductType", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("barbershop.Models.Entitys.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("barbershop.Models.Entitys.Service", b =>
                {
                    b.Navigation("AppointmentServices");

                    b.Navigation("PaymentServices");
                });

            modelBuilder.Entity("barbershop.Models.Entitys.ServiceType", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("barbershop.Models.Entitys.Skill", b =>
                {
                    b.Navigation("EmployeeSkills");
                });

            modelBuilder.Entity("barbershop.Models.Entitys.User", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Employees");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("barbershop.Models.Entitys.Voucher", b =>
                {
                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
